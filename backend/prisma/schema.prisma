// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  googleId             String?    
  password_hash        String?
  name                 String?
  created_at           DateTime @default(now())
  refreshTokenVersion  Int? 
  balance              Float         @default(500.0)

  // Relations
  friends              Friend[]      @relation("UserFriends1")
  friendsWith          Friend[]      @relation("UserFriends2")
  bets                 Bet[]         @relation("UserBets1")
  betsFrom             Bet[]         @relation("UserBets2")
  workoutGoals         WorkoutGoal[] @relation("UserGoals1")
  transactions         Transactions[] @relation("UserTransactions")
  workoutSessions      WorkoutSession[]
}

model Friend {
  id          String       @id @default(cuid())
  user_id1    String
  user_id2    String
  status      FriendStatus
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  deleted_at  DateTime?    

  user1       User         @relation("UserFriends1", fields: [user_id1], references: [id]) // Sender
  user2       User         @relation("UserFriends2", fields: [user_id2], references: [id]) // Receiver

  @@unique([user_id1, user_id2])   // Prevents duplicate friendships
  @@index([user_id1])              // Index for faster querying
  @@index([user_id2])              // Index for faster querying
}

enum FriendStatus {
  Pending
  Accepted
  Rejected
}

model Bet {
  id           String       @id @default(cuid())
  user_id1     String
  user_id2     String
  amount       Float
  status       BetStatus
  active       Boolean      @default(true)
  created_at   DateTime     @default(now())
  start_at     DateTime
  ends_at      DateTime

  // Relations
  user1        User         @relation("UserBets1", fields: [user_id1], references: [id])
  user2        User         @relation("UserBets2", fields: [user_id2], references: [id])
  workoutGoal  WorkoutGoal?
  transaction  Transactions[]

  @@unique([user_id1, user_id2])
}
enum BetStatus {
  Pending
  Accepted
  Rejected
}

model WorkoutGoal {
  id           String          @id @default(cuid())
  amount_time  Int
  time_gone    Int              @default(0)
  time_missed  Int              @default(0)
  created_at   DateTime        @default(now())
  start_at     DateTime
  end_at       DateTime
  user_id1     String
  betId        String?         @unique

  // Relations
  user1        User            @relation("UserGoals1", fields: [user_id1], references: [id])
  workoutSessions WorkoutSession[]
  bet          Bet?            @relation(fields: [betId], references: [id])
}

model WorkoutSession {
  id                    String    @id @default(cuid())
  user_id               String
  goal_id               String    // Foreign key to WorkoutGoal
  image                 String?
  image_time            DateTime?
  at_gym                Boolean
  geolocation_start_time DateTime
  geolocation_end_time  DateTime
  watch_data            Json?

  // Relations
  user                  User       @relation(fields: [user_id], references: [id])
  workoutGoal           WorkoutGoal @relation(fields: [goal_id], references: [id])
}

model Transactions {
  id            String    @id @default(cuid())
  userId      String
  stripe_transactionId  String
  status    String  @default("PENDING")
  betId     String?  
  // Relations
  user1         User       @relation("UserTransactions", fields: [userId], references: [id])
  bet           Bet?            @relation(fields: [betId], references: [id])
  
}